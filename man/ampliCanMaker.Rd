% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amplicanAlignments.R
\name{ampliCanMaker}
\alias{ampliCanMaker}
\title{Prepare alignments.}
\usage{
ampliCanMaker(config, fastq_folder, results_folder, total_processors = 1,
  skip_bad_nucleotides = TRUE, average_quality = 0, min_quality = 0,
  write_alignments = 2, scoring_matrix = "NUC44", gap_opening = 50,
  gap_extension = 0, gap_ending = FALSE, far_indels = TRUE,
  deletefq = FALSE, temp_folder = "", fastqfiles = 0)
}
\arguments{
\item{config}{(string) The path to your configuration file. For example:
/Home/johndoe/.../AmpliCan/res/Cas9_toy/run11.txt}

\item{fastq_folder}{(string) Path to FASTQ files. If not specified, FASTQ files should be
in the same directory as config file.}

\item{results_folder}{(string) Where do you want your results to be stored. The
program will create files in that folder so make sure you have writing permissions.}

\item{total_processors}{(int) Set this to the number of processors you want to use.
Default is 1. Works only if you have "doParallel" installed and accessible.}

\item{skip_bad_nucleotides}{(logical) Some sequences have faulty nucleotides labels
with N. If we find a sequence like that in either forwards or reverse, we skip that
aligment. Default is TRUE.}

\item{average_quality}{(int) The FASTQ file have a quality for each nucleotide,
being ! the lower and ~ the highest. In ASCII :
                             !"#$%&'()*+,-./0123456789:;<=>?@
                             ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`
                             abcdefghijklmnopqrstuvwxyz{|}~

This quality variable goes from 0 to 100, being 0 the lowest quality and 100 the highest.
You can write whatever number in between, and the program will find out the apropiate character
encoding. The filter works by converting each character to a number, and then finding the average.
If the average fall above this threshold then we take the sequence. Default is 0.}

\item{min_quality}{(int)  Similar as in average_quality, but this is the minimum quality for
ALL nucleotides. If one of them has quality BELLOW this threshold, then the sequence is skipped.
Default is 0.}

\item{write_alignments}{(int) How to write the aligments results into disk:
0 - Write nothing
1 - Write only the summary file
2 - Write also a verbose file with all the alignments
    in the same .txt file (Default option)}

\item{scoring_matrix}{(string) For now the only option is "NUC44".}

\item{gap_opening}{(int) The opening gap score. Default is 50.}

\item{gap_extension}{(int) The gap extension score. Default is 0.}

\item{gap_ending}{(logical) If you want that the ending gap count for the
alignment score set this to TRUE. Default is FALSE.}

\item{far_indels}{(logical) If the ending/starting gap should be considered to be
an indel. Default is TRUE. If you want to filter these out from the plots,
there is an option to do so in the plot function. You don't need to do it here.}

\item{deletefq}{(logical) If you have fastq.gz files they will be uncompressed into
the same directory. Set this to true if you want to delete uncompressed files afterwards.
Default is FALSE.}

\item{temp_folder}{(string) Your FASTQ files can be compressed in a file. If this
happens, the program needs to uncompress them first.
In order to do so, we need a folder where they will
be placed. In here, you can specify the path where
you want this files to be placed. If you don't
specify a path, they will be placed in the same
folder where the original files are. In any case you
will need writing permissions in the folder in order
to uncompress everything.}

\item{fastqfiles}{(int) Normally you want to use both FASTQ files. But in
some special cases, you may want to use only the
forward file, or only the reverse file.
0 - Use both FASTQ files
1 - Use only the forward FASTQ file
2 - Use only the reverse FASTQ file}
}
\description{
amplicanAlignments takes a configuration files, fastq reads and output directory to prepare
alignments. It is first step in our pipeline. Next step is amplicanAnalysis. If
you prefer to use simpler, more automated approach use amplicanPipeline.
}

