% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amplicanAlign.R
\name{amplicanAlign}
\alias{amplicanAlign}
\title{Align reads to amplicons.}
\usage{
amplicanAlign(config, fastq_folder, results_folder, total_processors = 1,
  skip_bad_nucleotides = TRUE, average_quality = 0, min_quality = 0,
  write_alignments = 2, scoring_matrix = "NUC44", gap_opening = 50,
  gap_extension = 0, gap_ending = FALSE, far_indels = TRUE,
  deletefq = FALSE, temp_folder = "", fastqfiles = 0, PRIMER_DIMER = 30,
  cut_buffer = 5)
}
\arguments{
\item{config}{(string) The path to your configuration file. For example:
\code{system.file('extdata', 'config.txt', package = 'amplican')}}

\item{fastq_folder}{(string) Path to FASTQ files. If not specified,
FASTQ files should be in the same directory as config file.}

\item{results_folder}{(string) Where do you want your results to be stored.
The package will create files in that folder so make sure you have writing
permissions.}

\item{total_processors}{(numeric) Set this to the number of processors you
want to use. Default is 1. Works only if you have 'doParallel' installed
and accessible.}

\item{skip_bad_nucleotides}{(logical) Some sequences have faulty nucleotides
labels with N. If we find a sequence like that in either forwards or
reverse, we skip that aligment. Default is TRUE.}

\item{average_quality}{(numeric) The FASTQ file have a quality for each
nucleotide, being ! the lower and ~ the highest. In ASCII :
                             !'#$%&'()*+,-./0123456789:;<=>?@
                             ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`
                             abcdefghijklmnopqrstuvwxyz{|}~

This quality variable goes from 0 to 100, being 0 the lowest quality and
100 the highest. You can write whatever number in between, and the program
will find out the apropiate character encoding. The filter works by
converting each character to a number, and then finding the average. If the
average fall above this threshold then we take the sequence. Default is 0.}

\item{min_quality}{(numeric)  Similar as in average_quality, but this is
the minimum quality for ALL nucleotides. If one of them has quality BELLOW
this threshold, then the sequence is skipped. Default is 0.}

\item{write_alignments}{(numeric) How to write the aligments results
into disk:
                        0 - Write nothing
                        1 - Write only the summary file
                        2 - Write also a verbose file with all the alignments
                            in the same .txt file (Default option)}

\item{scoring_matrix}{(string) For now the only option is 'NUC44'.}

\item{gap_opening}{(numeric) The opening gap score. Default is 50.}

\item{gap_extension}{(numeric) The gap extension score. Default is 0.}

\item{gap_ending}{(boolean) If you want that the ending gap count for the
alignment score set this to TRUE. Default is FALSE.}

\item{far_indels}{(boolean) If the ending/starting gap should be considered
to be an indel. Default is TRUE. If you want to filter these out from the
plots, there is an option to do so in the plot function. You don't need to
do it here.}

\item{deletefq}{(boolean) If you have fastq.gz files they will be
uncompressed into the same directory. Set this to true if you want to delete
uncompressed files afterwards. Default is FALSE.}

\item{temp_folder}{(string) Your FASTQ files can be compressed in a file. If
this happens, the program needs to uncompress them first. In order to do so,
we need a folder where they will be placed. In here, you can specify the
path where you want these files to be placed. If you don't specify a path,
they will be placed in the same folder where the original files are. You
you will need writing permissions in the folder in order to uncompress
everything.}

\item{fastqfiles}{(numeric) Normally you want to use both FASTQ files. But in
some special cases, you may want to use only the
forward file, or only the reverse file.
0 - Use both FASTQ files
0.5 - Use both FASTQ files,
but only for one of the reads (forward or reverse)
is required to have primer perfectly matched to
sequence - eg. use when reverse reads are
trimmed of primers, but forward reads have
forward primer in the sequence
1 - Use only the forward FASTQ file
2 - Use only the reverse FASTQ file}

\item{PRIMER_DIMER}{(numeric) Value specyfying buffer for PRIMER DIMER
detection. For a given read it will be recognized as PRIMER DIMER when
alignment will introduce gap of size bigger than:
length of amplicon - (lenghts of PRIMERS + PRIMER_DIMER value)}

\item{cut_buffer}{(numeric) Value specyfying a buffer for PAM, this will add
from both sides to a window defined from uppercase letters in the amplicon.
Deletions overlapping this window will be considered a
valid cut (if confirmed by both forward and rewerse reads).}
}
\value{
NULL All results are written into results_folder.
}
\description{
amplicanAlign takes a configuration files, fastq reads and output
directory to prepare alignments and summary. Finally it return a GRanges
object containing all missmatches, indels and insertions from our alignments.
}
\examples{
config <- system.file("extdata", "config.csv", package = "amplican") #example config
fastq_folder <- system.file("extdata", "", package = "amplican") #path to example fastq files
results_folder <- paste0(fastq_folder, "results") #output folder
amplicanAlign(config, fastq_folder, results_folder)

}
\seealso{
Other analysis steps: \code{\link{amplicanPipeline}},
  \code{\link{amplicanReport}}
}

