% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/amplicanSummarize.R
\name{amplicanHDR}
\alias{amplicanHDR}
\title{Find events that are correct HDR reads.}
\usage{
amplicanHDR(aln, aeSet, cfgT, donors,
  scoring_matrix = Biostrings::nucleotideSubstitutionMatrix(match = 5,
  mismatch = -4, baseOnly = TRUE, type = "DNA"), gapOpening = 25,
  gapExtension = 0, type = "overlap")
}
\arguments{
\item{aln}{(data.frame) Contains events from the alignments. Events have to
be filtered, shifted and normalized already.}

\item{aeSet}{(AlignmentExperimentSet) Contains whole alignments. Load with
readRDS().}

\item{cfgT}{(data.frame) Config file with the experiments details.}

\item{donors}{(character vector) Vector of donor templates, where sequences
correspond to the experiments from the cfgt$ID column.}

\item{scoring_matrix}{Use the same as in amplicanPipeline.}

\item{gapOpening}{(numeric)}

\item{gapExtension}{(numeric)}

\item{type}{(character) Same as in pairwiseAlignment.}
}
\value{
(data.frame) As cfgT, but with extra columns.
}
\description{
Before using this function make sure events are filtered to represent
consensus with \code{amplicanConsensus}, if you use both forward and
reverse reads. If you want to calculate metrics over expected cut site,
filter events using \code{amplicanOverlap}.
}
\details{
Takes donor sequences, aligns them against amplicons to determine expected
HDR events. Next searches for those events in aln data.frame and returns
T/F vector corresponding to every input event.
}
\examples{
file_path <- system.file("extdata", "results", "alignments",
                         "events_filtered_shifted_normalized.csv",
                         package = "amplican")
aln <- data.table::fread(file_path)
aeSet <- readRDS(system.file("extdata", "results", "alignments",
                             "AlignmentsExperimentSet.rds",
                             package = "amplican"))
cfgT <- data.table::fread(
  system.file("extdata", "results", "config_summary.csv",
              package = "amplican"))
!all(amplicanHDR(aln, aeSet, cfgT, cfgT$Amplicon))
# HDR will be zero as donors are exact amplicons and there is no events that
# comply

}
\seealso{
Other analysis steps: \code{\link{amplicanAlign}},
  \code{\link{amplicanConsensus}},
  \code{\link{amplicanFilter}}, \code{\link{amplicanMap}},
  \code{\link{amplicanNormalize}},
  \code{\link{amplicanOverlap}},
  \code{\link{amplicanPipeline}},
  \code{\link{amplicanReport}},
  \code{\link{amplicanSummarizeHDR}},
  \code{\link{amplicanSummarize}}
}
