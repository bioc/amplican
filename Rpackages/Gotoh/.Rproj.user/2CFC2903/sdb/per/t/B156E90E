{
    "contents" : "#' This function uses the Gotoh algorith to align two nucleotides sequences.\n#'\n#' \\code{gRCPP} This is the main aligning fucntion. The function allocate\n#'              memory for six matrices of size N+1 x M+1 , where N and M\n#'              are the length of the two sequences that you want to align. The\n#'              function return a string representation with verbose\n#'              information about the alignmnent, indels and missmaches,\n#'              possition of those, length, etc... This information is latter\n#'              to be processed in R.\n#'              \n#' \n#'              \n#' @note documentation.pdf: This R package does not contain additional files.\n#'                          This is a restriction from CRAN in order to\n#'                          minimize the size of the packages. You can however\n#'                          download the repository. In there you can find the\n#'                          file with multiple examples on how the code works.\n#'                          You will also find benchmarks comparing to other\n#'                          similar tools, and the benchmark code itself. The\n#'                          function runs in time O(N^2) instead of the classic\n#'                          O(N^3) where you check for the whole line and\n#'                          column for alignment extension score.\n#'                           \n#' @param pattern (string) See subject.\n#' \n#' @param subject (string) These two strings are the string representation of\n#'                          the sequences that we want to align. Passed as\n#'                          constant references (don't duplicate and don't\n#'                          modify). Both sequences are nucleotide sequences\n#'                          and we restrict the alphabet to {a,t,g,c,A,T,G,C}.\n#'                          \n#' @param scoringMatrix (string) Select a scoring matrix for the nucleotides.\n#'                               The default matrix is NUC44. You can choose\n#'                               from the following matrices:\n#'                               - NUC44 (+5 for match, -4 for miss)\n#'                                 \n#' @param gapOpening (int) The score penalty for opening a new gap. Default\n#'                         value is 50.\n#' \n#' @param gapExtension (int) The score penalty for extending the gap. Default\n#'                           value is 0.\n#'                            \n#' @param gapEnding (bool) Set to TRUE if you want that the alignment score\n#'                         be affected by the gaps at the end of the alignment,\n#'                         FALSE for otherwise. (FALSE default).\n#'                           \n#' @param farIndels (bool) If a gap start at the first positions, or ends at\n#'                         the last position, then is a far away indel. In\n#'                         some cases, you might want to consider that a\n#'                         deletion/insertion, and in some other you don't.\n#'                         Set to TRUE if you want that the start or ending\n#'                         gap counts as deletion/insertion. FALSE othewise.\n#'                         (TRUE default).\n#'                           \n#' @return (string) The function return a string with all the information. The\n#'                  string is divided in 5 parts. These parts are:\n#'                  \n#'                  - Verbose alignment result.\n#'                  - List of events from the alignment perspective.\n#'                  - List of events from the subject perspective.\n#'                  - Pattern alignment string.\n#'                  - Pattern subject string.\n#'                  \n#'                  You can split each part using\n#'                  the substring \"++++\" (four plus symbols).\n#'                  \n#'                  The parts mean the following:\n#'                  \n#'                  -- Verbose alignment result --\n#'                  \n#'                  In here you will find a verbose and comprehensive summary\n#'                  of the alignment. With all the variables logged,\n#'                  the comparison between the pattern and the subject, and the\n#'                  list of insertions, deletions, and missmatches.\n#'                  Example:\n#'                  \n#'                   ****************\n#'                   SEQUENCES \n#'                   ----------------\n#'                   Pattern: aaaaa\n#'                   Subject: aaddttaaaa\n#'                   ****************\n#'                   SCORING INFO \n#'                   ----------------\n#'                   Score matrix:       NUC44\n#'                   Gap opening:        50\n#'                   Gap extension:      0\n#'                   Gap ending penalty: 1\n#'                   ****************\n#'                   RESULTS \n#'                   ----------------\n#'                   Alignment Length: 10\n#'                   Score: 16\n#'                   \n#'                   -----aaaaa    10\n#'                        .||||    \n#'                   aaddttaaaa    \n#'                   ****************\n#'                   ALIGNMENT INFO\n#'                   ----------------\n#'                   Total Insertions: 0\n#'                   Total Deletions:  1\n#'                   Total Mismatches: 1\n#'                   ----------------\n#'                   INSERTIONS: \n#'                   ----------------\n#'                   \n#'                   --Insertions respect patterns coordinates-- \n#'                   \n#'                   \n#'                   ----------------\n#'                   DELETIONS: \n#'                   ----------------\n#'                   In Pattern\n#'                   START: 1\n#'                   END:   5\n#'                   \n#'                   \n#'                   --Deletions respect subject coordinates-- \n#'                   \n#'                   In Pattern\n#'                   START: 1\n#'                   END:   5\n#'                   \n#'                   \n#'                   ----------------\n#'                   MISMATCHES: \n#'                   ----------------\n#'                   START:    5\n#'                   ORIGINAL: t\n#'                   MUTATED:  a\n#'                   \n#'                   \n#'                   --Missmatches respect subject coordinates-- \n#'                   \n#'                   START:    5\n#'                   ORIGINAL: t\n#'                   MUTATED:  a\n#'                   \n#'                   \n#'                   \n#'                   ****************\n#'                   \n#'                   -- List of events from the alignment perspective --\n#'                   \n#'                   The next string is compact representation of the\n#'                   insertions, deletions, and missmatches. The representaion\n#'                   follows the following format:\n#'                   (at) <total N insertions> (at)\n#'                   <insertion 1, start position>,<insertion 1, end position>\n#'                   *\n#'                   ...\n#'                   *\n#'                   <insertion N, start position>,<insertion N, end position>\n#'                   !\n#'                   (at) <total M deletions> (at)\n#'                   <deletion 1, start position>,<deletion 1, end position>\n#'                   *\n#'                   ...\n#'                   *\n#'                   <deletion M, start position>,<deletion M, end position>\n#'                   !\n#'                   (at) <total P missmatches> (at)\n#'                   <missmatch 1, position>,\n#'                   <character of the original nucleotide>,\n#'                   <character of the new nucleotide>,\n#'                   *\n#'                   ...\n#'                   *\n#'                   <missmatch P, position>,\n#'                   <character of the original nucleotide>,\n#'                   <character of the new nucleotide>,\n#'                   \n#'                   This is an example:\n#'                   (at)0(at)!(at)1(at)1,5*!(at)1(at)5,t,a*\n#'                   \n#'                   -- List of events from the subject perspective --\n#'                   \n#'                   The next string is compact representation of the\n#'                   insertions, deletions, and missmatches. The twist here is\n#'                   that the information is given from the subject coordinates\n#'                   instead of the alignment coordinates.\n#'                   \n#'                   For example, if we have the alignment\n#'                   \n#'                   12345678901234567801 | Alignment coordinates\n#'                   --------------------\n#'                   AAAATTTTAAAA----AAAA | Pattern\n#'                   AAAA----AAAACCCCAAAA | Subject\n#'                   --------------------\n#'                   1234----567890123457 | Subject coordinates\n#'                   \n#'                   You can see that there is a deletion in the pattern. This\n#'                   deletion goes from 13 to 16, both included.\n#'                   \n#'                   However, this deletion have different coordinates, if we\n#'                   use the subject coordinates. In this case, the coordinates\n#'                   tells that there is a deletion in the pattern that goes\n#'                   from 9 to 12 both included.\n#'                   \n#'                   The format in which this information is portrayed is the\n#'                   same as in the previous list of events.\n#'                   \n#'                   -- Pattern alignment string --\n#'                   \n#'                   A string with the characters that represent the resulted\n#'                   alignment for the pattern. In our example:\n#'                   \n#'                   -----aaaaa\n#'                   \n#'                   -- Pattern subject string --\n#'                   \n#'                   A string with the characters that represent the resulted\n#'                   alignment for the subject. In our example:\n#'                   \n#'                   aaddttaaaa\n#'                   \n#'                   \n#' @examples\n#' gRCPP(\"aaaaa\", \"aaddttaaaa\")\n#' \n#' gRCPP(\"aaaaa\", \"aaddttaaaa\", \"NUC44\", 30, 5)\n#' \n#' gotohRCPP(\"aaaaa\", \"aaddttaaaa\", \"NUC44\", 30, 5, TRUE, TRUE)\n#' \n#' @export\ngRCPP <- function(pattern, subject, scoringMatrix=\"NUC44\", gapOpening = 50,\n                  gapExtension = 0, gapEnding = FALSE, farIndels = TRUE){\n\n  # Tell the program where is the cpp file with the functions\n  \n  # This is a half-ass solution for when R checks the package.\n  # The folder /src/ is not copied properly, so I added an alternative path\n  if(file.access(\"./src/gotohRCPP.cpp\", mode = 4) == 0 ){\n    Rcpp::sourceCpp(\"./src/gotohRCPP.cpp\")\n  }\n  else{\n    Rcpp::sourceCpp(\"./00_pkg_src/Gotoh/src/gotohRCPP.cpp\")\n  }\n  \n  \n  \n  result <- gotohRCPP(pattern, subject, scoringMatrix, gapOpening,\n                      gapExtension, gapEnding, farIndels)\n  \n  return (result)\n  \n}",
    "created" : 1432195180391.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2147982329",
    "id" : "B156E90E",
    "lastKnownWriteTime" : 1432904367,
    "path" : "~/Desktop/git2/AmpliCan/Rpackages/Gotoh/R/Gotoh.R",
    "project_path" : "R/Gotoh.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}